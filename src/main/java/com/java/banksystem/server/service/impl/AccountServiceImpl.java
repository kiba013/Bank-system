package com.java.banksystem.server.service.impl;import com.java.banksystem.server.entity.Account;import com.java.banksystem.server.entity.User;import com.java.banksystem.server.mapper.AccountMapper;import com.java.banksystem.server.repository.AccountRepository;import com.java.banksystem.server.repository.UserRepository;import com.java.banksystem.server.service.AccountService;import com.java.banksystem.web.dto.AccountDto;import com.java.banksystem.web.dto.UserDto;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.naming.InsufficientResourcesException;import java.math.BigDecimal;import java.util.List;@Service@Transactionalpublic class AccountServiceImpl implements AccountService {    private final AccountRepository accountRepository;    private final UserRepository userRepository;    public AccountServiceImpl(AccountRepository accountRepository, UserRepository userRepository) {        this.accountRepository = accountRepository;        this.userRepository = userRepository;    }    @Override    public AccountDto createAccount(Long user_id, AccountDto accountDto) {        User user = userRepository.findById(user_id).orElseThrow(()-> new RuntimeException("User not found"));        Account account = AccountMapper.INSTANCE.accountDtoToAccount(accountDto);        account.setUser(user);        accountRepository.save(account);        return accountDto;    }    @Override    @Transactional(readOnly = true)    public List<AccountDto> getAllAccounts() {        return AccountMapper.INSTANCE.toAccountListDto(accountRepository.findAll());    }    @Override    @Transactional(readOnly = true)    public AccountDto getAccountById(Long id) {        return AccountMapper.INSTANCE.accountToAccountDto(accountRepository                .findById(id).orElseThrow(()->new RuntimeException("Account with ID: " + id + " not found")));    }    @Override    public void deleteAccount(Long id) {        Account account = accountRepository.findById(id).orElseThrow(                () -> new RuntimeException("Account not found"));        accountRepository.delete(account);    }}