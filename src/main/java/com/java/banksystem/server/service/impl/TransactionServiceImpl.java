package com.java.banksystem.server.service.impl;import com.java.banksystem.server.entity.Account;import com.java.banksystem.server.entity.Transaction;import com.java.banksystem.server.exception.NotEnoughBalanceException;import com.java.banksystem.server.mapper.AccountMapper;import com.java.banksystem.server.mapper.TransactionMapper;import com.java.banksystem.server.repository.AccountRepository;import com.java.banksystem.server.repository.TransactionRepository;import com.java.banksystem.server.service.TransactionService;import com.java.banksystem.web.dto.AccountDto;import com.java.banksystem.web.dto.TransactionDto;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.stereotype.Service;import java.math.BigDecimal;import java.util.List;@Service@Transactionalpublic class TransactionServiceImpl implements TransactionService {    private final TransactionRepository transactionRepository;    private final AccountRepository accountRepository;    public TransactionServiceImpl(TransactionRepository transactionRepository, AccountRepository accountRepository) {        this.transactionRepository = transactionRepository;        this.accountRepository = accountRepository;    }    @Override    public TransactionDto createTransaction(TransactionDto transactionDto) {        Account senderAccount = accountRepository.findById(transactionDto.getSenderAccount().getId())                .orElseThrow();        Account recipientAccount = accountRepository.findById(transactionDto.getRecipientAccount().getId())                .orElseThrow();        BigDecimal senderBalance = senderAccount.getBalance();        if (senderBalance.compareTo(transactionDto.getAmount()) < 0) {            throw new NotEnoughBalanceException("На балансе не хватит средста, чтобы выполнить перевод!");        }        senderAccount.setBalance(senderBalance.subtract(transactionDto.getAmount()));        recipientAccount.setBalance(recipientAccount.getBalance().add(transactionDto.getAmount()));        Transaction transaction = TransactionMapper.INSTANCE.transactionDTOToTransaction(transactionDto);        try {            transactionRepository.save(transaction);        } catch (Exception e) {            throw new RuntimeException("Ошибка при сохранении транзакции", e);        }        return transactionDto;    }    @Override    @Transactional(readOnly = true)    public List<TransactionDto> getAllTransactions() {        return TransactionMapper.INSTANCE.toTransactionDtoList(transactionRepository.findAll());    }    @Override    @Transactional(readOnly = true)    public TransactionDto getTransactionById(Long id) {        Transaction transaction = transactionRepository.getReferenceById(id);        return TransactionMapper.INSTANCE.transactionToTransactionDTO(transaction);    }    @Override    public void deleteTransaction(Long id) {        Transaction transaction = transactionRepository.getReferenceById(id);        transactionRepository.delete(transaction);    }}