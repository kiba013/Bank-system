package com.java.banksystem.web.controller;import com.java.banksystem.server.entity.User;import com.java.banksystem.server.exception.UserNotFoundException;import com.java.banksystem.server.exception.UsernameAlreadyExistException;import com.java.banksystem.server.service.TransactionService;import com.java.banksystem.server.service.UserService;import com.java.banksystem.web.dto.UserDto;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@RequestMapping("api/v1/user")public class UserController {    private final UserService userService;    public UserController(UserService userService) {        this.userService = userService;    }    @GetMapping    public ResponseEntity<List<UserDto>> getAllUsers() {        return ResponseEntity.ok(userService.getAllUsers());    }    @PostMapping    public ResponseEntity<?> createUser(@RequestBody UserDto userDto) {        try {            UserDto user = userService.createUser(userDto);            return ResponseEntity.ok(user);        } catch (UsernameAlreadyExistException ex) {            return  ResponseEntity.status(HttpStatus.CONFLICT).body("Username: '" + userDto.getName() +"' already exist");        }    }    @GetMapping("{id}")    public ResponseEntity<?> getUserById(@PathVariable Long id) {        try {            UserDto user = userService.getUserById(id);            return ResponseEntity.ok(user);        } catch (UserNotFoundException exception) {            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User with ID: '" + id + "' not found");        }    }    @DeleteMapping("{id}")    public ResponseEntity<?> deleteUser(@PathVariable Long id) {        try {            userService.deleteUser(id);            return ResponseEntity.ok(id);        } catch (UserNotFoundException ex) {            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User with ID: '" + id + "' not found");        }    }}